;; The specification of INISON format in ABNF.
;; The ABNF grammar is defined in RFC 5234 (http://www.ietf.org/rfc/rfc5234.txt)
;; All text content must be encoded in ASCII-compatible format.

;; Due to the unspecified behaviors about greedy and ungreedy matching,
;; this grammar roughly describe the syntax of Comment and BlockCharacter.

INISON
  = *ESpace                                    ; Ignore whitespace and comments.
    [
      Expression
      *( *ESpace Newline *ESpace Expression )  ; Use new lines to separate expressions.
      *ESpace
    ]

Expression
  = SpecialBlock
  / SectionTitle  ; e.g. [ SECTION : SUBSECTION ] or [[ SECTION : SUBSECTION ]]
  / KeyValue      ; e.g. KEY = VALUE

ESpace
  = Space
  / Newline
  / Comment

Newline
  = %x0A     ; LF   (Unix & Linux)
  / %x0D     ; CR   (Legacy Mac)
  / %x0D.0A  ; CRLF (Legacy Windows)

Space
  = %x09  ; Horizontal Tab "	"
  / %x20  ; Space " "

Comment
  = "#" *CommentCharacter  ; e.g. # This is a comment till the end of a line/file.

CommentCharacter
  = %x09         ; Horizontal Tab "	"
  / %x20-7E      ; Normal ASCII characters
  / %x80-10FFFF  ; Other Unicode characters

IdentifierCharacter
  = %x2D         ; Hyphen -
  / %x30-39      ; Number 0-9
  / %x41-5A      ; Uppercase Letter A-Z
  / %x5F         ; Underscore _
  / %x61-7A      ; Lowercase Letter a-z
  / %x80-10FFFF  ; Other Unicode characters

SpecialCharacter  ; Just for comparison with IdentifierCharacter
  = ControlCharacter
  / %x20     ; Space
  / %x21-2C  ; ! " # $ % & ' ( ) * + ,
  / %x2E-2F  ; . /
  / %x3A-40  ; : ; < = > ? @
  / %x5B-5E  ; [ \ ] ^
  / %x60     ; `
  / %x7B-7E  ; { | } ~

ControlCharacter
  = %x00-19
  / %x7F

SectionTitle
  = "[" *Space Key *( *Space ":" *Space Key ) *Space "]"
  / "[[" *Space Key *( *Space ":" *Space Key ) *Space "]]"

GeneralBlock  ; NOT USED YET
  = SectionTitle *Space ":" *Space SectionMode *( Space / Comment )
    [ Newline *( Newline / BlockCharacter ) ]
    BlockEnd

SectionMode
  = Key

SpecialBlock
  = SectionTitle *Space ":" *Space SectionTextMode *( Space / Comment )
    [ Newline *( Newline / BlockCharacter ) ]
    BlockEnd
  ; e.g.
  ; [ SECTION : SUBSECTION ] : TEXT
  ; - [DONE] Document the specification.
  ; - [DONE] Make a validator.
  ; - [TODO] Make an efficient parser.
  ; - [TODO] Do configuration in INISON.
  ; ::END::
  / SectionTitle *Space ":" *Space SectionListMode *( Space / Comment )
    *( 1*Newline [ *Space Value *( Space / Comment ) ] )
    BlockEnd
  ; e.g.
  ; [ SECTION : SUBSECTION ] : LIST
  ; 1000000000000001
  ; 1000000000000010
  ; 1000000000010100
  ; ::END::

SectionTextMode
  = %x54.45.58.54 ; TEXT
  / %x74.65.78.74 ; text

SectionListMode
  = %x4C.49.53.54 ; LIST
  / %x6C.69.73.74 ; list

; It must not contain a BlockEnd.
BlockCharacter
  = %x09
  / %x20-7E
  / %x80-10FFFF

BlockEnd
  = Newline *Space "::" ( %x45.4E.44 / %x65.6E.64 ) "::"  ; i.e. ::END:: or ::end::

KeyValue
  = Key *Space "=" *Space Value

; To parsers: Consecutive spaces must be replaced by a single space " ".
Key
  = 1*IdentifierCharacter *( 1*Space 1*IdentifierCharacter )

Value
  = String
  / Boolean
  / Integer
  / Float
  / Array

String
  = BasicString
  / RawString

BasicString
  = DoubleQuote *BasicStringCharacter DoubleQuote

DoubleQuote
  = %x22  ; "

BasicStringCharacter
  = NormalCharacter
  / EscapedCharacter

NormalCharacter
  = %x20-21
  ; %x22 Skip DoubleQuote "
  / %x23-5B
  ; %x5C Skip Backslash \
  / %x5D-7E
  ; %x7F Skip DEL
  / %x80-10FFFF

EscapedCharacter
  = "\" ( %x22                     ; \"
        / %x5C                     ; \\
        / %x62                     ; \b
        / %x66                     ; \f
        / %x6E                     ; \n
        / %x72                     ; \r
        / %x74                     ; \t
        / %x75 "{" CodePoints "}"  ; \u{CodePoints}
        )

CodePoints
  = CodePoint *( "," CodePoint )

CodePoint
  = 1*HexDigit

RawString
  = "'" *RawStringCharacter "'"

RawStringCharacter
  = %x09
  / %x20-26
  / %x27.27      ; Use two single-quotes to represent one single-quote.
  / %x28-7E
  / %x80-10FFFF

Boolean
  = %x74.72.75.65     ; true
  / %x66.61.6C.73.65  ; false

; A signed or unsigned integer. 64-bit integers recommended.
Integer
  = DecimalInteger
  / HexadecimalInteger
  / BinaryInteger
  / OctalInteger

DecimalInteger
  = [ "+" / "-" ] 1*DecDigit   ; Decimal digits optionally prefixed with + or -

DecDigit
  = %x30-39  ; 0-9

HexadecimalInteger
  = %x30.78 1*HexDigit  ; Hexadecimal digits prefixed with 0x

HexDigit
  = DecDigit
  / %x41-46  ; A B C D E F
  / %x61-66  ; a b c d e f

BinaryInteger
  = %x30.62 1*BinDigit  ; Binary digits prefixed with 0b

BinDigit
  = %x30-31  ; 0-1

OctalInteger
  = %x30.6F 1*OctDigit  ; Octal digits prefixed with 0o

OctDigit
  = %x30-37  ; 0-7

; A floating-point number. Double-precision 64-bit numbers of IEEE 754 standard recommended.
Float
  = DecimalInteger ( Fraction [ Exponent ]
                   / Exponent
                   )

Fraction
  = "." 1*DecDigit  ; A decimal point followed by decimal digits.

Exponent
  = ( %x45 / %x65 ) DecimalInteger  ; A letter "E" or "e" followed by a decimal integer.

; Nested arrays are not allowed.
Array
  = "[" [ *Space Value *( *Space "," *Space Value ) ] *Space "]"
